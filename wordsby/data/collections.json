[{"ID":114,"post_author":"1","post_date":"2018-11-29 03:23:18","post_content":"","post_title":"Overview","post_status":"publish","comment_status":"closed","post_name":"docs","post_modified":"2018-12-04 02:24:44","post_parent":0,"menu_order":1,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/","featured_img":null,"template_slug":"single/page","acf":{"is_archive":null,"content":[{"acf_fc_layout":"markdown","markdown":"TransitionLink is a simple way of describing a page transition via props on a Link component. For both entering and exiting pages you can specify a number of timing values, pass state to both pages, and trigger a function for each.\r\n\r\nTransitionLink has been tested using gsap (my preferred method) and react-pose. It should also work with other react animation libraries and CSS transitions.\r\n\r\nCheck out TransitionLink <a href=\"http://gatsby-plugin-transition-link.netlify.com\" target=\"_blank\"> in action</a>.\r\n\r\n### Other Components\r\n\r\nThe AniLink component is a wrapper around TransitionLink offering up a few default transitions.\r\n\r\nThe TransitionState component is used to access the transition state and status of the page it's used in.\r\n\r\nThe TransitionPortal component is a regular React portal that can help with positioning animation elements above both the entering and exiting pages.\r\n\r\n\r\n"}]}},{"ID":18,"post_author":"1","post_date":"2018-11-15 02:54:49","post_content":"","post_title":"Installation","post_status":"publish","comment_status":"closed","post_name":"installation","post_modified":"2018-12-28 20:58:11","post_parent":114,"menu_order":2,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/installation/","featured_img":null,"template_slug":"single/page","acf":{"content":[{"acf_fc_layout":"markdown","markdown":"TransitionLink requires that you both add it to `gatsby-config.js` and import it as a page component.\r\n\r\nAdd TransitionLink to your project\r\n\r\n```bash\r\nyarn add gatsby-plugin-transition-link\r\n```\r\n```bash\r\nnpm i gatsby-plugin-transition-link\r\n```\r\n\r\nAdd TransitionLink to `gatsby-config.js`.\r\n\r\n```jsx\r\n// gatsby-config.js\r\nmodule.exports = {\r\n    plugins: [\r\n      `gatsby-plugin-transition-link`\r\n    ]\r\n];\r\n```\r\n\r\nImport it in your pages and components\r\n\r\n```jsx\r\nimport TransitionLink from 'gatsby-plugin-transition-link'\r\n```\r\n \r\n \r\n\r\n## Usage with gatsby-plugin-layout\r\n#### (and other persistent layouts)\r\n\r\nSince it was difficult to get layouts working properly with this plugin, I've added layout support to TransitionLink. Remove `gatsby-plugin-layout` and other persistent layouts from your project and add your Layout component as an option in `gatsby-config.js`.\r\n\r\n```jsx\r\n// gatsby-config.js\r\nmodule.exports = {\r\n    plugins: [\r\n       { \r\n          resolve: \"gatsby-plugin-transition-link\",\r\n          options: {\r\n              layout: require.resolve(`./src/components/Layout.jsx`)\r\n            }\r\n       }\r\n    ]\r\n];\r\n```"}],"is_archive":null}},{"ID":29,"post_author":"1","post_date":"2018-11-15 05:11:51","post_content":"","post_title":"TransitionLink","post_status":"publish","comment_status":"closed","post_name":"transitionlink","post_modified":"2018-12-04 02:50:08","post_parent":114,"menu_order":3,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/transitionlink/","featured_img":null,"template_slug":"single/page","acf":{"content":[{"acf_fc_layout":"markdown","markdown":"TransitionLink is a flexible and powerful way to write your own page transitions. If you want to use some default transitions with minimal effort, try [AniLink](/docs/anilink/).\r\n"},{"acf_fc_layout":"table_of_contents","title":"TransitionLink","type":"links","menu":{"ID":3,"name":"Docs Overview","slug":"docs-overview","count":4},"hash_links":[{"label":"Usage examples","link":"#usage"},{"label":"Page & Template transition props","link":"#page--template-props"},{"label":"Props & Options","link":"#props-and-options"}]},{"acf_fc_layout":"markdown","markdown":"## Usage\r\n\r\nThere are two main ways to use TransitionLink. \r\n\r\n1. Call a trigger function to manipulate the DOM with something like gsap. \r\n2. Use the [TransitionState](/docs/transitionstate) component alongside TransitionLink or use [page / template props](#page-template-props) to animate your components with something like react-spring, react-pose or CSS transitions.\r\n\r\nCheck [below](#props-and-options) for documentation of all available props and transition options.\r\n\r\nHere is a brief example of what a TransitionLink might look like for a function based gsap transition.\r\n\r\n```jsx\r\n<TransitionLink \r\n  to=\"/page-2\"\r\n  exit={{\r\n    trigger: ({ exit, node }) => this.interestingExitAnimation(exit, node),\r\n    length: 1\r\n  }}\r\n  entry={{\r\n    delay: 0.6\r\n  }}\r\n>\r\n  Go to page 2\r\n</TransitionLink>\r\n```\r\n\r\nThis is an example of what a TransitionLink might look like for a state based transition using react-spring or react-pose. See the [TransitionState](/docs/transitionstate/) component docs for more info on what your components might look like.\r\n\r\n```jsx\r\n<TransitionLink \r\n  to=\"/page-2\"\r\n  exit={{\r\n    length: 1\r\n  }}\r\n  entry={{\r\n    delay: 0.6\r\n  }}\r\n>\r\n  Go to page 2\r\n</TransitionLink>\r\n```\r\n\r\n\r\n"},{"acf_fc_layout":"markdown","markdown":"\r\n## Page / Template props\r\n\r\nYour pages and templates will receive three props:\r\n\r\n1. transitionStatus\r\n2. entry\r\n3. exit\r\n\r\n```jsx\r\nconst PageOrTemplate = ({ children, transitionStatus, entry, exit}) => {\r\n    console.log(transitionStatus, entry, exit)\r\n    return <div className={transitionStatus}>{children}</div>;\r\n}\r\n```\r\n\r\ntransitionStatus contains the current page transitions status (either exiting, exited, entering, or entered).\r\n\r\nexit and entry contain the entry and exit props and state passed from TransitionLink.\r\n\r\n```jsx\r\n<TransitionLink \r\n  to=\"/page-2\"\r\n  exit={{\r\n    length: 1\r\n    state: { pass: 'this to the exiting page' }\r\n  }}\r\n  entry={{\r\n    ...\r\n    state: { you: 'can add anything you want here' }\r\n  }}\r\n>\r\n  Go to page 2\r\n</TransitionLink>\r\n```\r\n\r\n"},{"acf_fc_layout":"markdown","markdown":"## Props and Options"},{"acf_fc_layout":"box","title":"to, activeClass & className props","content":"These are used exactly as they are in `gatsby-link`.\r\n\r\n```jsx\r\n<TransitionLink to=\"/page-2\" activeClass=\"active\" className=\"transition-link\">\r\n  Go to page 2\r\n</TransitionLink>\r\n```"},{"acf_fc_layout":"box","title":"exit & entry props","content":"Each takes an object of transition options to be applied to the exiting and entering pages respectively.\r\n\r\n```jsx\r\n<TransitionLink \r\n  to=\"/page-2\"\r\n  exit={{\r\n    ... // exit transition options\r\n  }}\r\n  entry={{\r\n    ... // entry transition options\r\n  }}\r\n>\r\n  Go to page 2\r\n</TransitionLink>\r\n```"},{"acf_fc_layout":"box","title":"trigger option","content":"This takes a function with access to the DOM node of the exiting or entering page, the users mouse event, and both the full exit and entry props. \r\n\r\n```jsx\r\nexit={{\r\n  trigger: ({ node, e, exit, entry }) => console.log(node, e, exit, entry)\r\n  // here node refers to the DOM node of the exiting page\r\n}}\r\nentry={{\r\n  trigger: ({ node, e, exit, entry }) => console.log(node, e, exit, entry)\r\n  // here node refers to the DOM node of the entering page\r\n}}\r\n```"},{"acf_fc_layout":"box","title":"length option","content":"This is the duration in seconds of the exit and/or entry animation. If no delay is specified these will start at the same time.\r\n\r\n```jsx\r\nexit={{\r\n  length: 2\r\n}}\r\nentry={{\r\n  length: 1\r\n}}\r\n```"},{"acf_fc_layout":"box","title":"delay option","content":"This is the duration in seconds to delay before beginning the animation. See the [timeline](/docs/timeline-of-events/) for more information on how this effects animation duration.\r\n\r\n```jsx\r\nentry={{\r\n  delay: 0.5\r\n}}\r\n```"},{"acf_fc_layout":"box","title":"zIndex option","content":"This is the zIndex of the page wrapper.\r\n\r\n```jsx\r\nexit={{\r\n  zIndex: 2 // exit default is 0\r\n}}\r\nentry={{\r\n  zIndex: 0 // entry default is 1\r\n}}\r\n```"},{"acf_fc_layout":"box","title":"state option","content":"This is the state to be passed as props to the page or template component of the exiting or entering page. It is also accessible anywhere in your app using the [TransitionState](/docs/helpers/#transition-state) component.\r\n\r\n```jsx\r\nexit={{\r\n  state: {\r\n    thisIs: 'passed to the exiting page'\r\n  }\r\n}}\r\nentry={{\r\n  state: {\r\n    thisIs: 'passed to the entering page'\r\n  }\r\n}}\r\n```"}],"is_archive":null}},{"ID":149,"post_author":"1","post_date":"2018-12-01 23:51:30","post_content":"","post_title":"AniLink","post_status":"publish","comment_status":"closed","post_name":"anilink","post_modified":"2018-12-04 02:54:54","post_parent":114,"menu_order":4,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/anilink/","featured_img":null,"template_slug":"single/page","acf":{"is_archive":null,"content":[{"acf_fc_layout":"markdown","markdown":"AniLink is a wrapper around the TransitionLink component and provides four default transitions: fade, paintDrip, swipe, and cover.\r\n\r\nCheck out the default transitions <a href=\"http://gatsby-plugin-transition-link.netlify.com\" target=\"_blank\">in action</a>."},{"acf_fc_layout":"markdown","markdown":"\r\n\r\n## Requirements\r\nAniLink is built with gsap so you'll need to install it first.\r\n\r\n\r\n```bash\r\nyarn add gsap\r\n```\r\n\r\n```bash\r\nnpm i gsap\r\n```\r\n\r\n\r\n"},{"acf_fc_layout":"markdown","markdown":"## Usage\r\n\r\nImport AniLink into the page you want to use it on\r\n\r\n\r\n```jsx\r\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\";\r\n```"},{"acf_fc_layout":"box","title":"Transition","content":"Pick one of the default transitions (paintDrip, swipe, cover, or fade) and add it as a blank prop.\r\n\r\n```jsx\r\n<AniLink fade to=\"page-4\">\r\n  Go to Page 4\r\n</AniLink>\r\n```"},{"acf_fc_layout":"box","title":"Duration","content":"\r\nIf you'd like, override the animation duration in seconds\r\n\r\n```jsx\r\n<AniLink paintDrip to=\"page-3\" duration={1}>\r\n  Go to Page 3\r\n</AniLink>\r\n```"},{"acf_fc_layout":"box","title":"Direction","content":"For directional transitions use left, right, up, or down.\r\n\r\n```jsx\r\n<AniLink swipe direction=\"up\" to=\"page-4\">\r\n  Go to Page 4\r\n</AniLink>\r\n```"},{"acf_fc_layout":"box","title":"Top","content":"For the swipe transition, you can assign wether the entering or exiting page should be on top\r\n\r\n```jsx\r\n<AniLink swipe top=\"exit\" to=\"page-4\">\r\n  Go to Page 4\r\n</AniLink>\r\n```\r\n\r\n```jsx\r\n<AniLink swipe top=\"entry\" to=\"page-5\">\r\n  Go to Page 5\r\n</AniLink>\r\n```\r\n\r\n**Note**: for the swipe transition you'll likely need to assign a background color to your pages."},{"acf_fc_layout":"box","title":"Color, hex","content":"To set the colour of the overlay with PaintDrip, use either the hex or color props. \r\n\r\n```jsx\r\n<AniLink paintDrip to=\"page-3\" color=\"rebeccapurple\">\r\n  Go to Page 3\r\n</AniLink>\r\n<AniLink paintDrip to=\"page-3\" hex=\"#663399\">\r\n  Go to Page 3\r\n</AniLink>\r\n```"},{"acf_fc_layout":"box","title":"bg","content":"To set the background of the overlay in the Cover transition, use the `bg` prop. bg forwards through an assignment for the css background property. This allows you to set a colour or use a background image if you'd like.\r\n\r\n```jsx\r\n<AniLink cover to=\"page-3\" bg=\"#663399\">\r\n  Go to Page 3\r\n</AniLink>\r\n```"}]}},{"ID":31,"post_author":"1","post_date":"2018-11-15 05:12:05","post_content":"","post_title":"TransitionState","post_status":"publish","comment_status":"closed","post_name":"transitionstate","post_modified":"2018-12-04 02:36:44","post_parent":114,"menu_order":5,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/transitionstate/","featured_img":null,"template_slug":"single/page","acf":{"content":[{"acf_fc_layout":"markdown","markdown":"You can use the TransitionState component to access transition state that was passed from TransitionLink anywhere in your components or pages. You also have access to the current page transition status.\r\n\r\nPossible statuses are: entering, entered, exiting, and exited.\r\n\r\nBelow is an example of using TransitionLink, TransitionState and react-pose together.\r\n\r\n```jsx\r\nimport { TransitionState } from \"gatsby-plugin-transition-link\";\r\n```\r\n\r\n```jsx\r\n<TransitionLink\r\n  to={props.to}\r\n  exit={{ length: 0.5 }}\r\n  entry={{ delay: 0.5 }}\r\n  >\r\n    Go to page 2\r\n</TransitionLink>\r\n```\r\n\r\n```jsx\r\nconst Box = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1 },\r\n})\r\n\r\n<TransitionState>\r\n      {({ transitionStatus }) => {\r\n        return (\r\n            <Box\r\n              className=\"box\"\r\n              pose={\r\n                ['entering', 'entered'].includes(transitionStatus)\r\n                  ? 'visible'\r\n                  : 'hidden'\r\n              }\r\n            />\r\n        )\r\n      }}\r\n</TransitionState>\r\n```\r\n"}],"is_archive":null}},{"ID":204,"post_author":"1","post_date":"2018-12-03 03:22:46","post_content":"","post_title":"TransitionPortal","post_status":"publish","comment_status":"closed","post_name":"transitionportal","post_modified":"2018-12-04 02:58:34","post_parent":114,"menu_order":6,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/transitionportal/","featured_img":null,"template_slug":"single/page","acf":{"content":[{"acf_fc_layout":"markdown","markdown":"If you have some animation elements which need to sit ontop of both pages you can achieve that using TransitionPortal which is a regular React portal.\r\n\r\n\r\n```jsx\r\nimport { TransitionPortal } from \"gatsby-plugin-transition-link\";\r\n```\r\n\r\n\r\n```jsx\r\n<TransitionPortal>\r\n  <SomeAnimationComponent>\r\n    This component will sit on top of both pages.\r\n  </SomeAnimationComponent>\r\n</TransitionPortal>\r\n```\r\n\r\n\r\nIf you need more control over the z-index of your portal you can assign it one of three levels: bottom, middle, or top. These have z-index values of 1000, 1100, and 1200 respectively. The default level is middle.\r\n\r\n\r\n```jsx\r\n<TransitionPortal>\r\n  <SomeAnimationComponent>\r\n    This component will sit on top of both pages.\r\n  </SomeAnimationComponent>\r\n</TransitionPortal>\r\n<TransitionPortal level=\"top\">\r\n  <SomeOtherAnimationComponent>\r\n    This component will sit on top of both pages and the other portal.\r\n  </SomeAnimationComponent>\r\n</TransitionPortal>\r\n```"}],"is_archive":null}},{"ID":33,"post_author":"1","post_date":"2018-11-15 05:12:23","post_content":"","post_title":"Timeline","post_status":"publish","comment_status":"closed","post_name":"timeline-of-events","post_modified":"2018-12-04 02:59:38","post_parent":114,"menu_order":7,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/timeline-of-events/","featured_img":null,"template_slug":"single/page","acf":{"content":[{"acf_fc_layout":"markdown","markdown":"On click, the exit timer begins and everything else waits until it finished, then the entry delay timer and exit length timers start at the same time. Once the exit length timer is finished the exiting page unmounts. Once the entry delay timer is up the entry length timer starts. It is possible to overlap all timers of the entering and exit pages except for the exit delay timer which always runs on it's own before everything else.\r\n\r\n\r\n1. on click the exit delay timer starts\r\n2. then the exit function is triggered and the exit length timer starts\r\n3. at the same time as the exit function, the entry delay timer starts\r\n4. after the exit length timer is up, the exiting page unmounts\r\n5. after the entry delay timer is up, the entry function is triggered, entry state is injected into the page, and the entry length timer starts\r\n6. once all timers are finished, global entry and exit delays and lengths are reset to 0.\r\n7. Exit state is reset once the exiting page has unmounted\r\n8. Entry state will remain until the user leaves the page\r\n\r\n\r\n## A primitive diagram"},{"acf_fc_layout":"image","image":{"ID":47,"id":47,"title":"gatsby-plugin-transition-link-timeline","filename":"gatsby-plugin-transition-link-timeline.png","filesize":578384,"url":"../uploads/2018/11/gatsby-plugin-transition-link-timeline.png","link":"/docs/timeline-of-events/gatsby-plugin-transition-link-timeline/","alt":"","author":"1","description":"","caption":"","name":"gatsby-plugin-transition-link-timeline","status":"inherit","uploaded_to":33,"date":"2018-11-15 05:43:58","modified":"2018-11-15 05:43:58","menu_order":0,"mime_type":"image/png","type":"image","subtype":"png","icon":"https://transitionlink.temperance.online/wp-includes/images/media/default.png","width":1948,"height":3828,"sizes":{"thumbnail":"../uploads/2018/11/gatsby-plugin-transition-link-timeline.png","thumbnail-width":76,"thumbnail-height":150,"medium":"../uploads/2018/11/gatsby-plugin-transition-link-timeline.png","medium-width":153,"medium-height":300,"medium_large":"../uploads/2018/11/gatsby-plugin-transition-link-timeline-768x1509.png","medium_large-width":768,"medium_large-height":1509,"large":"../uploads/2018/11/gatsby-plugin-transition-link-timeline.png","large-width":521,"large-height":1024}}}],"is_archive":null}},{"ID":197,"post_author":"1","post_date":"2018-12-03 02:58:39","post_content":"","post_title":"Tutorials","post_status":"publish","comment_status":"closed","post_name":"tutorials","post_modified":"2018-12-03 03:38:35","post_parent":114,"menu_order":8,"post_type":"page","comment_count":"0","type":"collection","taxonomies":[],"term_slugs":[],"taxonomy_slugs":[],"pathname":"/docs/tutorials/","featured_img":null,"template_slug":"single/page","acf":{"is_archive":null,"content":[{"acf_fc_layout":"markdown","markdown":"Coming soon!\r\n\r\nI will be writing out full tutorials on how each of the AniLink transitions were built using TransitionLink as well as a more in depth tutorial showing how to do complicated transitions with multiple page elements.\r\n\r\nIf you can't wait feel free to read the <a href=\"https://github.com/TylerBarnes/gatsby-plugin-transition-link/tree/master/src/AniLink\" target=\"_blank\">AniLink code</a>."}]}},{"ID":220,"post_author":"0","post_date":"2018-12-28 20:53:38","post_content":"","post_title":"schema_builder","post_status":"publish","comment_status":"closed","post_name":"schema_builder","post_modified":"2018-12-28 20:53:38","post_parent":0,"menu_order":0,"post_type":"schema_builder","comment_count":"0","type":"collection","taxonomies":{"category":{"labels":{"plural":"Categories","single":"Category"},"pathname":"/category/","terms":[{"term_id":1,"name":"Uncategorized","slug":"uncategorized","term_group":0,"term_taxonomy_id":1,"taxonomy":"category","description":"","parent":0,"count":1,"filter":"raw","term_order":"0","pathname":"/category/uncategorized/"}]}},"term_slugs":["uncategorized"],"taxonomy_slugs":["category","post_tag"],"pathname":"/schema_builder/schema_builder/","featured_img":null,"template_slug":"single/schema_builder","acf":{"is_archive":true,"posts_per_page":"1","post_type":"schema_builder"}}]